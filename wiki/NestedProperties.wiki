#summary Manipulate multiple related model objects in the same database transaction by setting them as nested properties.
#labels chapter,draft,1.1

When you're starting out as a Wheels developer, you are probably amazed at how simple and powerful calls to a model's `save()`, `create()`, `update()`, and `delete()` are. But then it all gets quite a bit more complex when you need to update multiple database tables in a single transaction.

Consider the many-to-many associations related to `customer`s, `publication`s, and `subscription`s from the [Associations] chapter.

{{{
<!--- Customer.cfc --->
<cfcomponent extends="Model">

    <cffunction name="init">
        <cfset hasMany(name="subscriptions", shortcut="publications")>
    </cffunction>

</cfcomponent>
}}}
{{{
<!--- Publication.cfc --->
<cfcomponent extends="Model">

    <cffunction name="init">
        <cfset hasMany("subscriptions")>
    </cffunction>

</cfcomponent>
}}}
{{{
<!--- Subscription.cfc --->
<cfcomponent extends="Model">

    <cffunction name="init">
        <cfset belongsTo("customer")>
        <cfset belongsTo("publication")>
    </cffunction>

</cfcomponent>
}}}

When it's time to save `customer`s' subscriptions in the `subscriptions` join table, one approach is to loop through data submitted by `checkBoxTag()`s, populate `subscription` model objects with the data, and call `save()`. This approach is valid, but there is a simpler way.

_Nested properties_ come to the rescue. With some simple model configurations and form helpers, you can simplify complex database transactions to a few lines of code and let Wheels do the rest!

== Setting up a Nested Property ==

The first step in setting up nested properties is to define them in your model's `init()` method with the `nestedProperties()` method. The `nestedProperties()` method helps you define associations that contain children models and rules for how your Wheels application can interact with that association in an automated fashion.

Using the `customer` model from the example above, let's say that we want to allow our Wheels application to automatically save and delete related `subscription` objects based on form submissions. We would set it up in `init()` like so:

{{{
<!--- Customer.cfc --->
<cfcomponent extends="Model">

    <cffunction name="init">
        <!--- Associations --->
        <cfset hasMany(name="subscriptions", shortcut="publications")>
        <!--- Nested properties --->
        <cfset nestedProperties(associations="subscriptions", autoSave=true, allowDelete=true)>
    </cffunction>

</cfcomponent>
}}