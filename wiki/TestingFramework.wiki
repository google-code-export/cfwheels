#summary An overview and examples of using the testing framework included in Wheels.
#labels chapter,1.1,draft

==The Theory Behind Testing==

At some point your code is going to break and the scary thing is it might not even be your fault. Upgrades, feature enhancements, bug fixes are all part of the development lifecycle and with deadlines and screaming managers you don't have the time to test the functionality of your entire application with every change you make.

The problem is that today's fix could be tomorrow's bug. What if there was an automated way of seeing if that change you're making is going to break something? That's where writing tests for your application can be invaluable.

In the past writing test against your application meant downloading, configuring and learning a completely separate framework. Often times this caused more headaches then it was worth and was the reason why most developers didn't bother writing tests. With Wheels we've included a customized version of the [http://rocketunit.riaforge.org RocketUnit Testing Framework] to help address just this issue.

With Wheels, writing tests for your application is part of the development lifecycle itself and running the test is as simple as clicking a link.

==Setting Your Application For Testing==

In order to run tests against your application, you must first create a `tests` directory off the root of your Wheels application. All tests *MUST* reside in the `tests` directory or within a subdirectory thereof.

When you run the tests for your application, Wheels recursively scans your application's `tests` directory and looks for any available valid tests to run, so feel free to organize the subdirectories and place whatever files needed to run your tests under the `tests` directory any way you like.

==Touring the Testing Framework==

Like everything else in Wheels, the testing framework is very simple yet powerful. You're not going to having to remember a hundred different commands and methods since Wheels' testing framework has only three commands and four methods (you can't get any simpler than that). Let's take a tour and go over the conventions, commands and methods that make up the different parts of the Testing Framework:

===Writing Tests===

Any components that will contain tests *MUST* extend the *_Test_* component:

{{{
<cfcomponent extends="Test">
}}}

If the testing engine sees that a component *DOES NOT* extend *_Test_*, that component skipped. This let's you create and store any _mock_ components you might want to use in your `tests` directory and keep everything together.

Any methods that will be used as tests *MUST* begin their name with *_test_*:

{{{
<cffunction name="testAEqualsB">
}}}

If a method *DOES NOT* begin with *_test_* it is ignored and skipped. This let's you create as many helper methods for your testing components as you want.

===Conventions===

*<font color="red">DO NOT VAR ANY VARIABLES</font>* used in your tests. In order for the testing framework to get access to the variables within the tests that you're writing, all variables need to be within the components *variables scope*. The easy way to do this is to just not "var" variables within your tests and Railo/ColdFusion will automatically assign these variables into the variables scope of the component for you. The only gotcha is that this could cause some variables to overwrite each other and gets kinda of confusing of what's being thrown into the variables scope.

===Evaluation===

*assert():* This is the main method that you will be using when developing tests. To use, all you have to do is provide a quoted expression. The power of this is that *ANY* expression can be used.

An example test that checks that two values equal each other:

{{{
<cffunction name="testAEqualsB">
	<cfset a = 1>
	<cfset b = 1>
	<cfset assert("a eq b")>
</cffunction>
}}}

An example test that checks that the first value is less then the second value:

{{{
<cffunction name="testAIsLessThanB">
	<cfset a = 1>
	<cfset b = 5>
	<cfset assert("a lt b")>
</cffunction>
}}}

You get the idea since you've used these kinds of expressions a thousand times. If you think of the assert() command as another way of using [http://livedocs.adobe.com/coldfusion/8/htmldocs/functions_e-g_03.html evaluate()], it will all make sense. Remember that you can use *ANY* expression, so you can write assertions against structures, arrays, objects, you name it, you can test it!

An example test that checks that a key exists in a structure:

{{{
<cffunction name="testKeyExistsInStructure">
	<cfset a = {a=1, b=2, c=3}>
	<cfset b = "d">
	<cfset assert("StructKeyExists(a, b)")>
</cffunction>
}}}

*raised():* Used when you want to test that an exception will be thrown. Raised() will raise and catch the exception and return to you the exception type (think cfcatch.type). Just like assert(), raised() takes a quoted expression as it's argument.

An example of raising the Wheels.TableNotFound error when you specify an invalid model name:

{{{
<cffunction name="testTableNotFound">
	<cfset e = raised("model('thisHasNoTable')")>
	<cfset r = "Wheels.TableNotFound">
	<cfset assert("e eq r")>
</cffunction>
}}}

===Debugging===

*debug():* Will display it's output after the test result so you can examine an expression more closely.

  * expression (string) - a quoted expression to display
  * display (boolean) - whether or not to display the output

_NOTE:_ overloaded arguments will be passed to the internal cfdump attributeCollection.

An example of displaying the debug output:

{{{
<cffunction name="testKeyExistsInStructure">
	<cfset a = {a=1, b=2, c=3}>
	<cfset b = "d">
	<cfset debug("a")>
	<cfset assert("StructKeyExists(a, b)")>
</cffunction>
}}}

An example of calling debug but NOT displaying the output:

{{{
<cffunction name="testKeyExistsInStructure">
	<cfset a = {a=1, b=2, c=3}>
	<cfset b = "d">
	<cfset debug("a", false)>
	<cfset assert("StructKeyExists(a, b)")>
</cffunction>
}}}

An example of displaying the output of debug as `text`:

{{{
<cffunction name="testKeyExistsInStructure">
	<cfset a = {a=1, b=2, c=3}>
	<cfset b = "d">
	<cfset debug(expression="a", format="text")>
	<cfset assert("StructKeyExists(a, b)")>
</cffunction>
}}}

===Setup and Teardown===

It's common when writing a group of tests that there will be some duplicate code, global configuration, and/or cleanup needed to be run before or after each test. In order to keep things DRY (Don't Repeat Yourself), the testing framework offers two special methods that you can optionally use to handle such configuration.

*setup():* Used to initialize or override any variables or execute any code that needs to be run *BEFORE EACH* test.

*teardown():* Used to cleanup any variables or execute any code that needs to be ran *AFTER EACH* test.

Example:

{{{
<cfcomponent extends="wheels.Test">

	<cffunction name="setup">
		<cfset controller = $controller(name="dummy")>
		<cfset f = controller.distanceOfTimeInWords>
		<cfset args = {}>
		<cfset args.fromTime = now()>
		<cfset args.includeSeconds = true>
	</cffunction>

	<cffunction name="testWithSecondsBelow5Seconds">
		<cfset c = 5 - 1>
		<cfset args.toTime = DateAdd('s', c, args.fromTime)>
		<cfinvoke method="f" argumentCollection="#args#" returnVariable="e">
		<cfset r = "less than 5 seconds">
		<cfset assert("e eq r")>
	</cffunction>

	<cffunction name="testWithSecondsBelow10Seconds">
		<cfset c = 10 - 1>
		<cfset args.toTime = DateAdd('s', c, args.fromTime)>
		<cfinvoke method="f" argumentCollection="#args#" returnVariable="e">
		<cfset r = "less than 10 seconds">
		<cfset assert("e eq r")>
	</cffunction>

</cfcomponent>
}}}

==Running Tests==

Down in the debug area of your Wheels application (that grey area at the bottom of the page), you will notice a *Run Tests* link in the following areas: 

*Application Name*, *Framework* and *Plugins*. Each of these links runs the following suite of tests:

*Application Name*: Runs any tests that you have created for your application. You should run these tests before deploying your application.

*Framework*: Runs any test that the Wheels Team has created for the Wheels framework itself. You should run these tests whenever you update your Wheels installation or are switching platforms.

*Plugins*: A *Run Tests* link will be next to *each* installed plugin you have in your wheels installation. You should run these tests whenever you install or update a plugin.

===Running Selected Test Packages===

Very often you might want to only run a package of tests (a group of tests within a single directory). In order to do this, just append the *package* argument to the url with the name of the package you want ran. For instance, say you had a test package called UserVerifcation. To run only that test package, add *&package=UserVerifcation* to the end of the test url.