#labels chapter,draft
==Introduction==

Database transactions are a way of grouping multiple queries together. They are useful in case the outcome of one query depends on the completion of another. For example, if you want to take money from one person's bank account, and transfer it into someone else's, you want to make sure the debit completes before running the credit.

You'll be pleased to know that Wheels makes using database transactions easy. In fact, for the vast majority of the time you won't need to think about using them at all, as Wheels automatically runs all queries within the callback chain as a single transaction for creates, updates and deletes.

If any of the callbacks within the chain return false, none of the queries will commit.

For example, say you want to automatically create the first post when a new author subscribes to a blog.

In your blog model, you would add the following code:

{{{
<!--- Author.cfc Model --->
<cffunction name="init">
        <cfset afterCreate(methods="createFirstPost")>
</cffunction>

<cffunction name="createFirstPost")>
        <cfset var post = model("Post").new(authorId=this.id, text="This is my first post!")>
        <cfreturn post.save()>
</cffunction>
}}}

In this example, if the post doesn't save, perhaps due to a validation problem, the author doesn't get created either. This helps to maintain database integrity.

=Disabling transactions=

If you want to manage transactions yourself using the <cftransaction> tag, you can simple add transaction=false to any CRUD method.

{{{
<cfset model("Author").create(name="John", transaction=false)>
}}}

=Disabling transactions=

If you want to manage transactions yourself using the <cftransaction> tag, you can simple add transaction=false to any CRUD method.

{{{
<cfset model("Author").create(name="John", transaction=false)>
}}}
