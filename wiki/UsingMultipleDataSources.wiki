#summary How to use more than one database in your Wheels app.
#labels chapter

_*Note:* This wiki contains "bleeding edge" documentation, which may reflect a future version of Wheels. Entries in the wiki may also be incomplete and unedited. For the "official" documentation, please visit [http://www.cfwheels.com/docs Official ColdFusion on Wheels Documentation]._

Sometimes you need to pull data from more than one database, whether it's by choice (for performance or security reasons, perhaps) or it's just because that's the way your infrastructure is set up.

Wheels has built-in functionality for this so that you don't have to revert back to writing the queries and setting the data source manually whenever you need to use a data source other than the default one. In order accomplish this, you will use the `datasource()` method.

By calling the `datasource()` method from within your model's `init()` method it instructs wheels to use that datasource whenever it interacts with that model.

{{{
<cfcomponent extends="Model">

    <cffunction name="init">
        <cfset datasource("mySecondDatabase")>
    </cffunction>

</cfcomponent>
}}}

It's important to note that in order for Wheels to use the datasource, it must *FIRST* be configured in your respected CFML engine.

The only caveat to use multiple datasources with Wheels is that its currently unable to work with associations. If including another model within a query, Wheels will use the calling models datasource for the context of the query.

PhotoGallery.cfc
{{{
<cfcomponent extends="Model">

    <cffunction name="init">
        <cfset datasource("myFirstDatabase")>
    </cffunction>

</cfcomponent>
}}}

Photo.cfc
{{{
<cfcomponent extends="Model">

    <cffunction name="init">
        <cfset datasource("mySecondDatabase")>
    </cffunction>

</cfcomponent>
}}}

In the following example since the Photo model is the main model being used, its datasource will become the context of the built query.

{{{
<cfset myphotos = model("photos").findAll(include="photogalleries")>
}}}