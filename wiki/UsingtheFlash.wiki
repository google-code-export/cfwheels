#summary Using the Flash to pass data from one request to the next.
#labels chapter,1.1,draft

The Flash is actually a very simple concept. And no, it has nothing to do with Adobe's Flash Player.

The Flash is just a `struct` in the `session` or `cookie` scope with some added functionality. It is cleared at the end of the *next* page that the user views. This means that it's a good fit for storing messages or variables from one request to the next.

==An Example of Using the Flash==

The code below is commonly used in Wheels applications to store a message about an error in the Flash and then redirect to another URL, which then displays the message in its view page.

The following example shows how code dealing with the Flash can look in an action that handles a form submission:

{{{
<cfset flashInsert(error="Oops! Please correct your errors and try again")>
<cfset redirectTo(action="edit")>
}}}

Here's an example of how we then display the Flash message we just set in the view page for the "edit" action:

{{{
<p class="error-message"><cfoutput>#flash("error")#</cfoutput></p>
}}}

As you can see above, you use the [flashInsert flashInsert()] function when you want to store data in the Flash and the [flash flash()] function when you want to display the data in a view.

The key chosen above is `error`, but it could have been anything. Just like with a normal `struct`, the naming of the keys is your job.

As an example, you may choose to use one key for storing error messages and another one for storing "success" messages.

==Shortcut for Setting the Flash and Redirecting==

The more Wheels websites you build the more you're gonna find that you keep repeating that [flashInsert flashInsert()] / [redirectTo redirectTo()] combo. Wheels is all about finding commonalities in code and creating a better and quicker solution for it so it figures that we have something for this situation:

<cfset redirectTo(action="edit", error="Oops! Please correct your errors and try again")>

That piece of code does exactly the same thing as the two lines of code shown previously in this chapter. The Wheels [redirectTo redirectTo()] function sees the `error` argument coming in and knows that it's not part of its own arguments so therefore you (the developer) must intend for it to be stored in the Flash.

So what if you want to redirect to the "edit" action *and* set a key in the Flash named "action" as well? Simply prepend the flash key with "flash" to tell Wheels to avoid the naming collision and still place an "action" key in the Flash, like this:

<cfset redirectTo(action="edit", flashAction="Oops! Please correct your errors and try again")>

Obviously we don't recommend naming the keys in your Flash "action" but these naming collisions can also happen when you want to redirect to a route that takes custom arguments for example so remember this work around.

==Your Storage Options==

We mentioned that the data for the Flash is stored in either a cookie or the session scope. You can find out where Wheels stores the Flash data in your application by running `get("flashStorage")`. If you have session management enabled in your application Wheels will default to storing the Flash in the session scope, otherwise it will store it in a cookie on the user's computer. You can of course override this setting in the same way you can override all other Wheels settings, by running the [set set()] function like this: `set(flashStorage="session")`.

Note: before you set Wheels to use the session scope you have to make sure that session management is enabled. To enable it all you have to do is add `this.sessionManagement = true` to the `config/app.cfm` file.

So, what storage should you choose. Well, to be honest it doesn't really matter much so just go with the default setting. If you're a control freak though and always want to use the optimal setting here are some considerations.

 * Although the Flash data is deserialized before stored in a cookie making it possible to store complex values you have to remember that a cookie is not the best place to store data that requires a lot of space.

 * If you run multiple ColdFusion servers in a cluster and use session based Flash storage users might experience a loss of their Flash variables as they hop between servers.

 * Using cookies is, generally speaking, less secure than using the session scope.

==More Flashy Functions==

Besides [flash flash()] and [flashInsert flashInsert()] that are used to read from/insert to the Flash, there are a few other functions worth mentioning.

[flashCount flashCount()] is used to count how many key/value pairs there are in the Flash.

[flashClear flashClear()] and [flashDelete flashDelete()] does exactly what its counterparts in the struct world, `StructClear` and `StructDelete`, does, namely clear the entire Flash and delete a specific key/value from it.

[flashKeyExists flashKeyExists()] is used to check if a specific key exists. So it would make sense to make use of that function in the code listed above to avoid outputting an empty `<p>` tag on requests where the Flash is empty. ([flash flash()] will return an empty string when the specified key does not exist). Throw the [flashIsEmpty flashIsEmpty()] function in the mix and you might end up with code looking something like this:


{{{
<cfif NOT flashIsEmpty()>
  <div id="flash-messages">
    <cfif flashKeyExists("error")>
      <p class="error-message"><cfoutput>#flash("error")#</cfoutput></p>
    <cfelseif flashKeyExists("success")>
      <p class="success-message"><cfoutput>#flash("success")#</cfoutput></p>
    </cfif>
  </div>
</cfif>
}}}

Check out the [ControllerRequestFunctions Controller Request Functions] page for a listing of all the functions that deal with the Flash.

By the way, the name "Flash" comes from Ruby on Rails, like so many other cool things in Wheels.