#summary Developing web apps with Wheels is a breeze, but most of the web apps out there leverage asynchronous requests via AJAX, how is this possible with Wheels? Gladly we have several options:
#labels chapter,1.0,draft

  * The "Do it yourself" where no plugins whatsoever will be used, a simple out of the box Wheels installation.
  * The plugins approach will take in consideration two (2) plugins with one example of each.

While there are several flavors of AJAX libraries out there, we will be using the [http://jquery.com/ jQuery framework] in this tutorial. Let's assume you are fairly familiar with jQuery, so that the following code examples makes the most sense possible.

Let's create the simplest example of all, a link that will display an alert back to the user.

==The "Do it yourself" option)==

Creating AJAX powered web apps shouldn't be difficult nowadays, while using Wheels without any plugins can get you there, it requires a bit more work from you in order to make it work, luckily not that much work.

To create the example discussed before, we will need to create a link to a controller's action like so:

{{{
  <!--- View code --->
  #linkTo(text="Alert me!", action="ajaxHello", id="alert_button")#
}}}

That piece of code by itself will work just like you spect to, redirecting you to the `ajaxHello` action (inside a `Pages` controller). But, we don't want that, we need it to be an asynchronous request, so let's add this simple Javascript (inside it's corresponding `script` tags or in a separate `.js` file:

{{{
  // let's listen to the "click" event of the "alert_button" link and make an AJAX request
  $('#alert_button').click(function() {
    $.ajax({ 
        type: 'POST', 
        url: '/pages/ajax-hello', // you could use the Wheels URLFor helper here
        dataType: 'json', 
        success: function(response) { 
                alert(response); 
        } 
    });
    return false; // keeps the normal request from firing
  });
}}}

With that we can now listen to the `click` event of that hyperlink created before and make an async request to the `Pages` controller, this won't work yet, we are still missing a key component, note how the request expects a `dataType` of JSON; Currently Wheels only supports HTML responses in its controller, but there is a way around this:

{{{
  <!--- Controller code --->
  <cffunction name="ajaxHello">
    
    <!--- If your request is an AJAX request, respond with the CFML SerializeJSON function --->
    <cfif isAjax()> 
      <cfset renderText(SerializeJSON("Hi there coder"))>
    </cfif>
    
    <!--- Otherwise, let Wheels do its normal HTML respond (the `ajaxhello.cfm` view file) --->
  </cffunction>
}}}

Assuming you already included jQuery in your application, and you followed the code examples before, you now have a AJAX powered web application built on Wheels. Hitting that `Alert me!` link, your `Pages` controller will respond back to you the message via AJAX.

Well that wasn't so bad, but there is an even easier approach. Enter Wheels plugins.

==The plugins approach==

One of the many benifets of Wheels its the [http://cfwheels.org/plugins Plugin Directory] currently there are two (2) plugins that will ease your AJAX development:

  * [http://cfwheels.org/plugins/listing/26 Remote Form Helpers Plugin]: Adds a set of CFMJS functions (CFML + Javascript) as well as a set of new form helpers that work exclusively with AJAX.
  * [http://cfwheels.org/plugins/listing/6 Provides Plugin]: Enables Wheels to respond to yours requests with XML and JSON as well (currently HTML is the only one supported in an standalone version of Wheels). 

===Remote Form Helpers plugin===

By itself will add another type of respond to your application, `javascript` responses. Let's replicate the previous example ( (please refer to the plugin's documentation and follow the steps required to install it before you continue)

First, let's visit that view file where the link is created, and let's replace that core with

{{{
  <!--- View code --->
  #remoteLinkTo(text="Alert me!", action="ajaxHello")#
}}}

Notice the new function called `remoteLinkTo`, that is all you need in your view so go ahead and delete the whole `script` block, the new function will take care of creating the javascript for you. Let's review that `Pages` controller now:

{{{
  <!--- Controller code --->
  <cffunction name="ajaxHello">
    
    <!--- If your request is an AJAX request, respond with the `ajaxhello.js.cfm remote view` --->
    <cfif isAjax()> 
      <cfset renderRemotePage()>
    </cfif>
    
    <!--- Otherwise, let Wheels do its normal HTML respond (the `ajaxhello.cfm` view file) --->
  </cffunction>
}}}

Wait, what? `ajaxhello.js.cfm`? Yes, the `Remote Form Helpers` plugin enables you to use a whole new set of view files, all files that have a `.js.cfm` suffix are considered `remote view files` and will be used with your `renderRemotePage` function to send it back to your initial request. Now let's create that `ajax.hello.js.cfm` file in your `/views/pages/` folder and add this code:

{{{
  <!--- Remote View code --->
  alert("Hi there from the Remote Form Helpers plugin");
}}}

That's it, without a single line of Javascript we were able to setup an AJAX powered Wheels application. 